#  Copyright (c) 2013, 2014, Pyhrol, pyhrol@rambler.ru
#  GEO: N55.703431,E37.623324 .. N48.742359,E44.536997
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  4. Neither the name of the Pyhrol nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#
# $Date: 2015-07-11 03:54:14 +0300 (Сб., 11 июля 2015) $
# $Revision: 1046 $

# kate: syntax CMake;

set(PYHROL_SAFE_MODE OFF CACHE BOOL "Use library version with minimal functionality")
set(PYHROL_USE_PYSELF OFF CACHE BOOL "Enable using `pyhrol` module symbolic link (@LIBRARY_pyself_DESTINATION@|@LIBRARY_pyselfsafe_DESTINATION@) into Python dist-packages directory")
set(PYHROL_USE_STATIC OFF CACHE BOOL "Use static `pyhrol` libraries instead of dynamic")
set(ROOT_DIRECTORY @CMAKE_INSTALL_PREFIX@)
set(PYHROL_INCLUDE_DIRS ${ROOT_DIRECTORY}/include/pyhrol)
set(PYTHON_INCLUDE_DIRS "@PYTHON_INCLUDE_DIRS@" CACHE STRING "Compiler options to include Python headers")
set(PYTHON_LIBRARIES "@PYTHON_LIBRARIES@" CACHE STRING "")


if (PYHROL_USE_PYSELF)
  find_package (PythonInterp 2.4 REQUIRED)
  set(PYTHON_DIST_PACKAGES ${ROOT_DIRECTORY}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/dist-packages/ CACHE PATH "")
  if (PYHROL_SAFE_MODE)
    add_custom_target(link COMMAND sh -c "ln -sf ${ROOT_DIRECTORY}/lib/pyselfsafe.so ${PYTHON_DIST_PACKAGES}/pyhrol.so")
  else()
    add_custom_target(link COMMAND sh -c "ln -sf ${ROOT_DIRECTORY}/lib/pyselfstd.so ${PYTHON_DIST_PACKAGES}/pyhrol.so")
  endif()
endif()


function (pyhrol_configure_targets)
  string(REPLACE ";" " -I" TMP_INCLUDE "${PYTHON_INCLUDE_DIRS}")
  string(REGEX MATCHALL "([^ ]+)" PYHROL_TARGETS "${ARGV}")
  foreach (PYHROL_TARGET ${PYHROL_TARGETS})
    get_target_property (TMP_CFLAGS ${PYHROL_TARGET} COMPILE_FLAGS)
    if (NOT TMP_CFLAGS)
      unset(TMP_CFLAGS)
    endif()
    get_target_property (TMP_LFLAGS ${PYHROL_TARGET} LINK_FLAGS)
    if (NOT TMP_LFLAGS)
      unset(TMP_LFLAGS)
    endif()

    set_target_properties (${PYHROL_TARGET} PROPERTIES
      COMPILE_FLAGS "${TMP_CFLAGS} \\
        -I${TMP_INCLUDE} \\
        -I${ROOT_DIRECTORY}/include/pyhrol"
      LINK_FLAGS "${TMP_LFLAGS} -L${ROOT_DIRECTORY}/lib"
    )

    get_target_property (TMP_NAME ${PYHROL_TARGET} PREFIX)
    if (NOT TMP_NAME)
      set_target_properties (${PYHROL_TARGET} PROPERTIES PREFIX "")
    endif()
    get_target_property (TMP_NAME ${PYHROL_TARGET} LOCATION)
    get_filename_component(TMP_NAME ${TMP_NAME} NAME_WE)

    set (PYHROL_STARTER_FILE ${CMAKE_CURRENT_BINARY_DIR}/pyhrol_starter_${TMP_NAME}.cpp)
    file(WRITE ${PYHROL_STARTER_FILE} "//Generated by ${CMAKE_CURRENT_LIST_FILE}\n\nvoid pyhrol_init(const char *);\n\nextern \"C\" void init${TMP_NAME}()\n{\n  pyhrol_init(\"${TMP_NAME}\");\n}\n")
    add_library (starter_${PYHROL_TARGET} STATIC ${PYHROL_STARTER_FILE})
    set_target_properties (starter_${PYHROL_TARGET} PROPERTIES COMPILE_FLAGS "-fPIC")

    if (PYHROL_SAFE_MODE)
      set (PYHROL_SUFFIX safe)
    endif()
    if (PYHROL_USE_STATIC)
      set (TMP_BEFORE_LIB -Wl,-Bstatic,-whole-archive)
      set (TMP_AFTER_LIB -Wl,-Bdynamic,-no-whole-archive)
    endif()
    target_link_libraries (${PYHROL_TARGET} ${TMP_BEFORE_LIB} -lpyhrol${PYHROL_SUFFIX} ${TMP_AFTER_LIB} ${PYTHON_LIBRARIES} -Wl,-whole-archive starter_${PYHROL_TARGET} -Wl,-no-whole-archive)
    if (PYHROL_USE_PYSELF)
      add_dependencies(${PYHROL_TARGET} link)
    endif()

    if (CMAKE_VERBOSE_MAKEFILE)
      get_target_property (TMP_FLAGS ${PYHROL_TARGET} COMPILE_FLAGS)
      message (STATUS "CXXFLAGS for ${PYHROL_TARGET}: \"${TMP_FLAGS}\"")
      get_target_property (TMP_DEFS ${PYHROL_TARGET} COMPILE_DEFINITIONS)
      message (STATUS "Definitions for ${PYHROL_TARGET}: \"${TMP_DEFS}\"")
    endif()
  endforeach()
endfunction (pyhrol_configure_targets)



